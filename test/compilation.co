bare = -> Coco.compile it, {+bare}

# Ensure that carriage returns don't break compilation on Windows.
eq 'one;\ntwo;' bare 'one\r\ntwo'


# Tab characters should work.
eq '_(_);' bare '\n\t_\t_\t\n'


# `{eval: true}` forces the last value to be returned.
eq 1, Function('return ' + Coco.compile 'delete @1' {+eval}).call {1}
eq '''
  var ref$;
  ref$ = o.k, delete o.k, ref$;
''' Coco.compile 'delete o.k' {+eval, +bare}


eq 'v = w = x;' Coco.compile 'v = w := x' {globals: <[v w]>, +bare}


compileThrows 'missing `"`' 2 '\n"\n'

compileThrows 'unterminated JS literal' 3 '\n\n```\n'
compileThrows 'unterminated string'     3 "\n\n'\n"
compileThrows 'unterminated words'      3 '\n\n<[\n'

compileThrows 'contaminated indent %20'    2 '1\n\t 2'
compileThrows 'contaminated indent %09'    3 ' 1\n  2\n\t3'
compileThrows 'contaminated indent %u3000' 2 '''
try =>  1
try =>　2
'''

compileThrows 'unmatched dedent (1 for 2)' 3 '1\n  2\n 3'

compileThrows 'unmatched `)`' 2 '()\n)'
compileThrows 'unmatched `]`' 3 '[{\n\n]}'

compileThrows 'missing `)CALL`' 1 'f('

compileThrows 'unexpected indent by 1' 2 '{x\n y}'


throws '''
  empty range on line 1
  at filename
''' -> Coco.compile '0 til 0' {\filename}


eq '''
var k;
for (k in o) {}
''' bare 'for k in o then'


eq '''
/* (c) 2010 me */
"use strict";
var I;
LABEL:
I = function(it){
  return it;
};
''' bare '''
/* (c) 2010 me */
"use strict"
`LABEL:`
I = -> it
'''


eq "a['in'] = this['in'];", bare 'a import {@in}'


eq '''
while (0) {
  while (0) {
    ({}), {};
    break;
  }
}
''' bare '(({} = ({}; {}); break) while 0; continue) while 0'


compileThrows 'invalid use of null' 1 'null.po'


compileThrows 'deprecated octal literal 0666' 1 '0666'
compileThrows 'invalid number 8 in base 8'    1 '8r8'


tokens = Coco.lex '''
"""
  1 #{
    2
    3
  } 4
"""
'''
eq tokens.join('\n'), '''
NEWLINE,
,0
(,\",0
STRNUM,\"1 \",1
+-,+,1
(,(,2
INDENT,4,2
STRNUM,2,2
NEWLINE,
,3
STRNUM,3,3
DEDENT,4,4
NEWLINE,
,4
),),4
+-,+,4
STRNUM,\" 4\",5
),,5
NEWLINE,
,5
'''


# Indentation on line 1 should be valid.
eq '1;\n2;' bare '  1\n  2'


eq 'STRNUM,0,0 ,,,0 STRNUM,1,1' Coco.tokens('''
0 \\
  1
''').slice(0 3).join ' '


eq '!a;' bare '!!!a'


eq '''(function(){
  if ((function(){ debugger }())) {
    debugger;
  }
});''' bare '-> debugger if debugger'


eq '1;\n2;\n3;\n4;' bare '''
  1
  2
3
4
'''


eq '''
#!js
var a;
a = 1;
''' bare '`#!js`; a = 1'


# `__proto__` should be available as a variable name.
eq 1, __proto__ = 1


# [#1](https://github.com/satyr/coco/issues/1)
λ = -> 七 = 7
eq λ(), 7

compileThrows 'invalid identifier "♪"' 1 'ƒ　♪　♯'


# - [coffee#1195](https://github.com/jashkenas/coffee-script/issues/1195)
# - Ignore top-level `void`s.
eq '(function(){});' bare '''
  -> void;
  void;
  void
'''


# [#237](https://github.com/satyr/coco/issues/237)
Coco.compile 'class A; class B; class C'


# [livescript#279](https://github.com/gkz/LiveScript/issues/279)
Coco.compile \################################################################

# Can't hush an empty return
compileThrows "Can't hush a return without a value" 1 '-> return void'
