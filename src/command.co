`#!/usr/bin/env node`
# The `coco` utility.

{argv} = process

global import
  Coco : require \./coco
  fs   : require \fs
  path : require \path
  util : require \util
  say  : !-> process.stdout.write it + \\n
  warn : !-> process.stderr.write it + \\n
  die  : !->
    fs.writeSync process.stderr.fd, it + \\n
    process.exit 1
  p    : !-> []forEach.call @@, console.dir
  pp   : !(x, showHidden, depth) ->
    say util.inspect x, showHidden, depth, !process.env.NODE_DISABLE_COLORS
  ppp  : !-> pp it, true, null

# Use the [option parser](#optparse).
{$args} = o = require(\./optparse) do
  interactive : 'start REPL; use ^J for multiline input'
  compile     : 'compile to JavaScript and save as .js files'
  output      :['compile into the specified directory' \DIR]
  watch       : 'watch scripts for changes, and repeat'
  stdin       : 'read stdin'
  eval        : 'read command line arguments as script'
  require     :['require libraries before executing' \FILE+]
  bare        : 'compile without the top-level function wrapper'
  print       : 'print the result to stdout'
  lex         : 'print the tokens the lexer produces'
  tokens      : 'print the tokens the rewriter produces'
  ast         : 'print the syntax tree the parser produces'
  json        : 'print/compile as JSON'
  nodejs      :['pass options through to the "node" binary' \ARGS+ '']
  version     : 'display version'
  help        : 'display this'

die "Unrecognized option(s): #that\n\n#{help!}" if o.$unknowns * ' '

switch
case o.nodejs  then forkNode!
case o.version then say version!
case o.help    then say help!
default
  o.run = not o.compile ||= o.output
  process.execPath = argv.0 = argv.1
  argv.splice 2 9e9
  argv.push ...if
    o.stdin => $args
    o.run   => $args.splice 1 9e9
    else    => []
  if o.require
    ({filename} = module)filename = \.
    that.forEach require
    module <<< {filename}
  switch
  case o.eval
    argv.1 = \eval
    compileScript '' $args * \\n
  case o.interactive
    repl!
  case o.stdin
    compileStdin!
  case $args.length
    compileScripts!
  case require \tty .isatty 0
    say version! + \\n + help! + \\n
    repl!
  default
    compileStdin!

# Calls a `fs` method, exiting on error.
!function fshoot name, arg, callback
  e, result <-! fs[name] arg
  die e.stack || e if e
  callback result

# Asynchronously read in each Coco script in a list of source files and
# compile them. If a directory is passed, recursively compile all
# _.co_ files in it and all subdirectories.
!function compileScripts
  co = /\.(?:co)+(?:on)?$/
  $args.forEach !-> walk it, path.normalize(it), true
  !function walk source, base, top
    !function work
      fshoot \readFile source, !-> compileScript source, "#it", base
    e, stats <-! fs.stat source
    if e
      if not top or co.test source or \/ is source.slice -1
        die "Can't find: #source"
      walk "#source.co" base
      return
    if stats.isDirectory!
      unless o.run
        fshoot \readdir source, !-> it.forEach !-> walk "#source/#it" base
        return
      source += \/index.co
    if top or co.test source
      if o.watch then watch source, work else work!

# Compile a single source script, containing the given code, according to the
# requested options.
!function compileScript filename, input, base
  options = {filename, o.bare}
  t       = {input, options}
  try
    Coco.emit \lex t
    t.tokens = Coco.tokens t.input, raw: o.lex
    if o.lex or o.tokens
      printTokens t.tokens
      throw
    Coco.emit \parse t
    t.ast = Coco.ast t.tokens
    json  = o.json or /\.(?:json\.co|(?:co)+on)$/test filename
    if o.ast
      say if json then t.ast.stringify 2 else ''trim.call t.ast
      throw
    Coco.emit \compile t
    options.bare ||= json or o.run
    t.ast.makeReturn! if json or o.run and o.print
    t.output = t.ast.compileRoot options
    if json or o.run
      Coco.emit \run t
      t.result = Coco.run t.output, options, true
    if json
      t.output = JSON.stringify(t.result, null, 2) + \\n
    if o.run
      switch
      case json    then process.stdout.write t.output
      case o.print then console.log t.result
      throw
    Coco.emit \write t
    if o.print or not filename
    then say t.output.trimRight!
    else writeJS filename, t.output, base, json
  catch if e?
    if Coco.listeners(\failure)length
      Coco.emit \failure e, t
    else
      warn "Failed at: #filename" if filename
      unless e instanceof SyntaxError or /^Parse error /test e.message
        e = e.stack or e
      if o.watch then warn e + \\7
                 else die  e
    return
  Coco.emit \success t

# Attach the appropriate listeners to compile scripts incoming over **stdin**.
!function compileStdin
  argv.1 = \stdin
  process.openStdin!
    code = ''
    &on \data !->
      if 4 of [it.toString!trim![*-1]charCodeAt!, it.toString!charCodeAt!] # ctrl-D
        compileScript '' code
        process.exit!
      else
        code += it
    &on \end  !-> compileScript '' code

# Watch a source Coco file using `setTimeout`, taking an `action` every
# time the file is updated.
!function watch source, action
  :loop let ptime = 0
    {mtime} <-! fshoot \stat source
    do action if ptime ^ mtime
    setTimeout loop, 500ms, mtime

# Write out a JavaScript source file with the compiled code. By default, files
# are written out in `cwd` as `.js` files with the same name, but the output
# directory can be customized with `--output`.
!function writeJS source, js, base, json
  #     foo.co     => foo.js
  #     foo.jsm.co => foo.jsm
  filename = path.basename(source)replace do
    /(?:(\.\w+)?\.\w+)?$/ -> @@1 or if json then \.json else \.js
  dir = path.dirname source
  if o.output
    dir = path.join that, dir.slice if base is \. then 0 else base.length
  jsPath = path.join dir, filename
  !function compile
    e <-! fs.writeFile jsPath, js || \\n
    return warn e if e
    util.log "#source => #jsPath" if o.watch
  e <-! fs.stat dir
  return compile! unless e
  require \child_process .exec do
    "mkdir #{[\-p unless /^win/test process.platform]} #dir" compile

# Pretty-print a stream of tokens.
!function printTokens tokens
  lines = []
  for [tag, val, lno] of tokens
    lines@@[lno]push if tag.toLowerCase! is val then tag else "#tag:#val"
  say(if l then l.join(' ')replace /\n/g \\\n else '') for l of lines

# A Read-Eval-Print-Loop.
# Good for simple tests or poking around the
# [**node.js** API](http://nodejs.org/api/).
#
# - __^M__: Compile input, and prints (if _--compile_) or evaluates it.
# - __^J__: Insert linefeed.
# - __^C__: Cancel input if any. Quit otherwise.
# - __??__: <https://github.com/joyent/node/blob/master/lib/readline.js>
!function repl
  argv.1 = \repl
  code = ''
  cont = 0
  rl   = require(\readline)createInterface process.stdin, process.stdout
  reset = !->
    rl.line = code := ''
    rl.prompt!
  ({_ttyWrite} = rl)_ttyWrite = (char) ->
    # Count __^J__.
    if char is \\n
    then cont += 1
    else cont := 0
    _ttyWrite ...
  prompt = \coco
  prompt += " -#that" if \b * !!o.bare + \c * !!o.compile
  unless o.compile
    module.paths = module.._nodeModulePaths \
      module.filename = process.cwd! + \/repl
    vm = require \vm
    global <<< {module, exports, require}
    server = ^require(\repl)REPLServer:: <<<
      context: global, commands: [], useGlobal: true
      useColors: process.env.NODE_DISABLE_COLORS
      eval: !(code,,, cb) ->
        try res = vm.runInThisContext code, \repl catch
        cb e, res
    rl.completer = server~complete
  rl.on \SIGCONT rl.prompt
  rl.on \SIGINT !->
    if @line or code then say ''; reset! else @close!
  rl.on \close process~exit
  rl.on \line !->
    # Trigger evaluation also on double blank lines (__^J^J^J__).
    if 0 < cont < 3
      code += it + \\n
      @output.write \. * prompt.length + '. '
      return
    return reset! unless code += it
    try
      if o.compile
        say Coco.compile code, {o.bare}
      else
        _  = vm.runInThisContext Coco.compile(code, {\eval o.bare}), \repl
        _ !? global <<< {_}
        pp  _
        say _ if typeof _ is \function
    catch then say e
    reset!
  process.on \uncaughtException !-> say "\n#{ it?stack or it }"
  process.on \exit !->
    # Handle `echo 42 | coco -i` etc.
    rl._ttyWrite \\r if code and rl.output.isTTY
  rl.setPrompt "#prompt> "
  rl.prompt!

# Start up a new __node.js__ instance with the arguments in `--nodejs` passed
# to it, preserving the other options.
!function forkNode
  args = argv.slice 1; i = 0
  args.splice i-- 2 if that is \--nodejs while args[++i]
  require(\child_process)spawn do
    process.execPath
    o.nodejs.join(' ')trim!split(/\s+/)concat args
    cwd: process.cwd!, env: process.env, customFds: [0 to 2]

function help then """
  Usage: coco [options] [files] [arguments]

  Options:
  #o
"""

function version then "Coco #{Coco.VERSION}"
